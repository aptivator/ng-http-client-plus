{"version":3,"sources":["../../../src/http-wrappers/request-preprocessor/request-preprocessor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAyB,QAAQ,CAAC;AAC/C,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,sBAAsB,CAAC;AAE7D,MAAM,CAAC,OAAO,WAAU,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW;IACrD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAE5B,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;IAC3C,CAAC;IAED,EAAE,CAAA,CAAC,WAAW,CAAC,CAAC,CAAC;QACf,EAAE,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;YACH,IAAA,oBAAM,CAAS;YACpB,EAAE,CAAA,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,YAAY,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,MAAM,EAAE,KAAK,EAAE,IAAI;oBAC5C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpC,CAAC,EAAE,IAAI,UAAU,EAAE,CAAC,CAAC;gBAErB,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,OAAO,GAAG,IAAI,CAAC;IACjB,CAAC;IAED,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;QACT,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,OAAO,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QAC5B,CAAC;QAEI,IAAA,yBAAO,CAAY;QAExB,EAAE,CAAA,CAAC,CAAC,CAAC,OAAO,YAAY,WAAW,CAAC,CAAC,CAAC,CAAC;YACrC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;gBAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACrC,CAAC,EAAE,IAAI,WAAW,EAAE,CAAC,CAAA;QACvB,CAAC;QAED,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,YAAU,KAAO,CAAC,CAAC;QAErE,EAAE,CAAA,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,OAAO,CAAC;QACjB,CAAC;IACH,CAAC;IAED,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9B,CAAC","file":"request-preprocessor.js","sourceRoot":"","sourcesContent":["import * as _                    from 'lodash';\nimport {HttpParams, HttpHeaders} from '@angular/common/http';\n\nexport default function(url, body, options, queryMethod) {\n  let token = this.getToken();\n\n  if(!url.startsWith('http')) {\n    url = (this.configs.baseUrl || '') + url;\n  }\n  \n  if(queryMethod) {\n    if(body) {\n      let {params} = body;\n      if(params && !(params instanceof HttpParams)) {\n        params = _.reduce(params, (params, value, name) => {\n          return params.append(name, value);\n        }, new HttpParams());\n        \n        _.extend(body, {params});\n      }\n    }\n\n    options = body;\n  }\n  \n  if(token) {\n    if(!options) {\n      options = {headers: null};\n    }\n    \n    let {headers} = options;\n    \n    if(!(headers instanceof HttpHeaders)) {\n      headers = _.reduce(headers, (headers, value, name) => {\n        return headers.append(name, value);\n      }, new HttpHeaders())\n    }\n    \n    options.headers = headers.append('Authorization', `Bearer ${token}`);\n    \n    if(queryMethod) {\n      body = options;\n    }\n  }\n  \n  return [url, body, options];\n}\n"]}